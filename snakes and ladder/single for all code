using System;
using System.Collections.Generic;

// Dice class for rolling random values
public class Dice
{
    private Random random = new Random();
    public int Roll() => random.Next(1, 7); // Generates a random number between 1 and 6
}

// Player class
public class Player
{
    public string Name { get; set; }
    public int Position { get; set; } = 1; // All players start at position 1
}

// Board class with random Snakes and Ladders
public class Board
{
    private readonly Dictionary<int, int> snakes = new Dictionary<int, int>();
    private readonly Dictionary<int, int> ladders = new Dictionary<int, int>();
    private const int boardSize = 100;
    private Random random = new Random();

    public Board()
    {
        GenerateSnakesAndLadders();
    }

    private void GenerateSnakesAndLadders()
    {
        // Randomly place 5 snakes and 5 ladders
        for (int i = 0; i < 5; i++)
        {
            int start, end;
            do
            {
                start = random.Next(20, boardSize);
                end = random.Next(1, start - 1);
            } while (snakes.ContainsKey(start) || ladders.ContainsKey(start));
            
            snakes[start] = end;
        }

        for (int i = 0; i < 5; i++)
        {
            int start, end;
            do
            {
                start = random.Next(1, boardSize - 10);
                end = random.Next(start + 1, boardSize);
            } while (ladders.ContainsKey(start) || snakes.ContainsKey(start));
            
            ladders[start] = end;
        }
    }

    public int MovePlayer(int position)
    {
        if (snakes.ContainsKey(position))
        {
            Console.WriteLine($"Oops! Snake at {position} moves you down to {snakes[position]}");
            return snakes[position];
        }
        if (ladders.ContainsKey(position))
        {
            Console.WriteLine($"Great! Ladder at {position} moves you up to {ladders[position]}");
            return ladders[position];
        }
        return position;
    }

    public bool HasWon(int position) => position >= boardSize;
}

// Game class to manage turns using a queue
public class Game
{
    private Queue<Player> players;
    private Dice dice;
    private Board board;

    public Game(List<string> playerNames)
    {
        players = new Queue<Player>();
        dice = new Dice();
        board = new Board();
        
        foreach (var name in playerNames)
        {
            players.Enqueue(new Player { Name = name });
        }
    }

    public void Start()
    {
        while (true)
        {
            var currentPlayer = players.Dequeue();
            int roll = dice.Roll();
            Console.WriteLine($"{currentPlayer.Name} rolled a {roll}");
            currentPlayer.Position += roll;
            currentPlayer.Position = board.MovePlayer(currentPlayer.Position);

            if (board.HasWon(currentPlayer.Position))
            {
                Console.WriteLine($"{currentPlayer.Name} wins the game!");
                break;
            }
            
            players.Enqueue(currentPlayer);
        }
    }
}

// Program class to initiate the game
class Program
{
    static void Main()
    {
        Console.WriteLine("Enter player names (comma-separated):");
        var input = Console.ReadLine();
        var playerNames = new List<string>(input.Split(","));
        
        Game game = new Game(playerNames);
        game.Start();
    }
}
