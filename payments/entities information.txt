1. User
Represents: A customer making payments or a merchant receiving payments.
Attributes:

UserId (PK) â€“ Unique identifier for the user.

Name â€“ Full name of the user.

Email â€“ Email address.

PhoneNumber â€“ Contact number.

UserType â€“ Enum (CUSTOMER, MERCHANT, ADMIN).

CreatedAt â€“ Account creation date.

UpdatedAt â€“ Last modified date.

ðŸ”¹ Responsibilities:

Can initiate a transaction.

Can view transaction history.

Merchants receive payments.

2. PaymentMethod
Represents: The payment method chosen by the user.
Attributes:

PaymentMethodId (PK) â€“ Unique identifier.

UserId (FK) â€“ Links to the user.

Type â€“ Enum (CREDIT_CARD, DEBIT_CARD, UPI, WALLET, NET_BANKING).

Provider â€“ Payment provider (Visa, MasterCard, PayPal, etc.).

TokenizedDetails â€“ Secure tokenized data instead of raw card details.

CreatedAt â€“ Timestamp when added.

ðŸ”¹ Responsibilities:

Stores the userâ€™s preferred payment methods.

Uses tokenization for security.

Handles selection during transactions.

3. Transaction
Represents: A single payment transaction.
Attributes:

TransactionId (PK) â€“ Unique identifier.

UserId (FK) â€“ User who initiated the transaction.

MerchantId (FK) â€“ Merchant receiving the payment.

Amount â€“ Payment amount.

Currency â€“ Transaction currency.

PaymentMethodId (FK) â€“ Payment method used.

Status â€“ Enum (PENDING, SUCCESS, FAILED, REFUNDED).

TransactionType â€“ Enum (PAYMENT, REFUND).

CreatedAt â€“ Transaction initiation time.

UpdatedAt â€“ Last status update.

ðŸ”¹ Responsibilities:

Stores all payment transactions.

Tracks the status of payments.

Allows retry in case of failure.

4. PaymentGateway
Represents: External payment services handling payments (Stripe, Razorpay, PayPal).
Attributes:

GatewayId (PK) â€“ Unique identifier.

Name â€“ Payment gateway name.

APIKey â€“ Secure API authentication.

TransactionFee â€“ Fee charged per transaction.

CurrencySupported â€“ List of supported currencies.

CreatedAt â€“ Timestamp.

ðŸ”¹ Responsibilities:

Processes payments through third-party providers.

Validates transactions and returns success/failure.

Handles refunds & chargebacks.

5. Refund
Represents: A refund transaction when a user requests a refund.
Attributes:

RefundId (PK) â€“ Unique identifier.

TransactionId (FK) â€“ Transaction being refunded.

UserId (FK) â€“ User requesting a refund.

MerchantId (FK) â€“ Merchant processing the refund.

Amount â€“ Refunded amount.

Status â€“ Enum (PENDING, SUCCESS, FAILED).

CreatedAt â€“ Refund request time.

ðŸ”¹ Responsibilities:

Processes refunds for transactions.

Works with the PaymentGateway for refunds.

Tracks refund status.

6. Notification
Represents: Notifications sent to users about payments.
Attributes:

NotificationId (PK) â€“ Unique identifier.

UserId (FK) â€“ User receiving the notification.

Type â€“ Enum (SMS, EMAIL, PUSH).

Message â€“ Notification content.

Status â€“ SENT or FAILED.

CreatedAt â€“ Timestamp.

ðŸ”¹ Responsibilities:

Notifies users of successful, failed, or refunded transactions.

Can be integrated with Observer Pattern.

7. AuditLog
Represents: Logs for transaction activity.
Attributes:

LogId (PK) â€“ Unique identifier.

TransactionId (FK) â€“ Associated transaction.

Action â€“ Enum (CREATED, UPDATED, FAILED).

Message â€“ Log message.

Timestamp â€“ Date and time.

ðŸ”¹ Responsibilities:

Stores logs for tracking issues.

Useful for debugging and compliance.

8. FraudDetection
Represents: A system detecting suspicious payments.
Attributes:

FraudCheckId (PK) â€“ Unique identifier.

TransactionId (FK) â€“ Transaction being checked.

RiskScore â€“ Score indicating fraud risk.

Status â€“ Enum (SAFE, SUSPICIOUS, BLOCKED).

CreatedAt â€“ Timestamp.

ðŸ”¹ Responsibilities:

Uses AI/ML or rule-based checks for fraud detection.

Blocks high-risk transactions.

Relationships Between Entities
âœ… User has multiple PaymentMethods (1 User â†’ Many PaymentMethods).
âœ… User can initiate multiple Transactions (1 User â†’ Many Transactions).
âœ… Transaction belongs to a PaymentMethod (1 PaymentMethod â†’ Many Transactions).
âœ… Transaction is processed by a PaymentGateway (1 Gateway â†’ Many Transactions).
âœ… Transaction may have a Refund (1 Transaction â†’ 1 Refund max).
âœ… Notification is triggered per transaction (1 Transaction â†’ Many Notifications).
âœ… Transaction generates multiple AuditLogs (1 Transaction â†’ Many Logs).
âœ… Transaction undergoes FraudDetection (1 Transaction â†’ 1 FraudCheck).